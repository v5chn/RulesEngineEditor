@*
    // Copyright (c) Alex Reich.
    // Licensed under the CC BY 4.0 License.
*@
@using RulesEngine.Models
@using RulesEngineEditor.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject RulesEngineEditor.Services.WorkflowService WorkflowService

<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <sp_grid_rules>
        <div>
            <div>规则名称</div>

            <InputText class="form-control" @bind-Value="@rule.RuleName" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />
            @if (@rule.ExceptionMessage != "")
            {
                <blockquote class="reeditor_blockquote @RuleStyle(rule)">@rule.ExceptionMessage</blockquote>
            }
        </div>

        <div>
            <div>激活</div>

            <InputCheckbox @bind-Value="@rule.Enabled" class="form-control">
            </InputCheckbox>
        </div>

        <div>
            <div>操作</div>

            <InputSelect ValueExpression="@(()=>rule.Operator)" Value="@rule.Operator" class="form-control" ValueChanged="((string value) => OnValueChanged(value))">
                <option value="null">none</option>
                <option value="And">&</option>
                <option value="AndAlso">&&</option>
                <option value="Or">|</option>
                <option value="OrElse">||</option>
            </InputSelect>
        </div>
        <div>
            <button @onclick="@(e => RuleDelete.InvokeAsync(rule))" class="btn btn-secondary">
                <span class="oi oi-trash"></span>
                <div>删除</div>
            </button>
        </div>
    </sp_grid_rules>
    <sp_grid_rules>
        <div>
            <div>成功事件</div>

            <InputTextArea class="form-control jsonTextArea" @bind-Value="@rule.SuccessEvent" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">
            </InputTextArea>
        </div>
        <div>
            <div>错误消息</div>

            <InputTextArea class="form-control jsonTextArea" @bind-Value="@rule.ErrorMessage" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">
            </InputTextArea>
        </div>
        <div>
            <div>表达式</div>

            <InputTextArea form="Expression" class="form-control jsonTextArea" @bind-Value="@rule.Expression" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">
            </InputTextArea>
        </div>

    </sp_grid_rules>
    <span>&nbsp;</span>
    <sp_grid_rules>
        <div>
            <div>动作</div>
            <InputTextArea form="Expression" class="form-control jsonTextArea" @bind-Value="@Actions" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">
            </InputTextArea>
        </div>
    </sp_grid_rules>
    <span>&nbsp;</span>
    <h5>本地参数</h5>
    <div>
        <button class="reeditor_button" title="New Local Param" @onclick="NewLocalParam">添加</button>
        <ScopedParams scopedParams=rule.LocalParams ScopedParamsChanged="WorkflowService.WorkflowUpdate" />
    </div>
    <h5>规则</h5>
    <div>
        <button class="reeditor_button" title="New Rule" @onclick="(() => WorkflowService.NewRule(rule))">添加</button>
        <Rules rules=rule.Rules RulesChanged="WorkflowService.WorkflowUpdate" />
    </div>
</EditForm>
@code {
    [Parameter]
    public RuleData rule { get; set; }

    string _actions;
    public string Actions
    {
        get
        {
            return JsonNormalizer.Normalize(JsonSerializer.Serialize(rule.Actions, new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
                IncludeFields = true,
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            }));
        }
        set
        {
            //RulesEngine.Models.RuleActions
            var actions = JsonSerializer.Deserialize<dynamic>(value, new JsonSerializerOptions
            {
                Converters = { new DynamicJsonConverter() }
            });

            RuleActions newActions = new RuleActions();
            if ((actions as IDictionary<string, object>).ContainsKey("OnSuccess"))
            {
                newActions.OnSuccess = new ActionInfo();
                newActions.OnSuccess.Name = actions.OnSuccess.Name;
                newActions.OnSuccess.Context = new Dictionary<string, object>(actions.OnSuccess.Context);
            }
            if ((actions as IDictionary<string, object>).ContainsKey("OnFailure"))
            {
                newActions.OnFailure = new ActionInfo();
                newActions.OnFailure.Name = actions.OnFailure.Name;
                newActions.OnFailure.Context = new Dictionary<string, object>(actions.OnSuccess.Context);
            }
            rule.Actions = newActions;
        }
    }

    [Parameter]
    public EventCallback<RuleData> RuleDelete { get; set; }

    private EditContext EditContext;

    string RuleStyle(RuleData rule)
    {
        if (rule.IsSuccess == null)
            return "";
        else if ((bool)rule.IsSuccess)
            return "redditor_rules_success";
        else
            return "redditor_rules_error";
    }

    void NewLocalParam()
    {
        if (rule.LocalParams == null)
        {
            rule.LocalParams = new List<ScopedParamData>();
        }
        rule.LocalParams.Insert(0, new ScopedParamData());
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(rule);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == "Enabled")
        {
            rule.ExceptionMessage = "";
        }
        WorkflowService.WorkflowUpdate();
    }
    private Task OnValueChanged(string value)
    {
        if (value == "null")
        {
            value = null;
        }
        rule.Operator = value;
        return Task.CompletedTask;
    }
}
